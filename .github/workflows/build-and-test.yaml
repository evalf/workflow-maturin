name: Build and test a Python package using Maturin
on:
  workflow_call:
    inputs:
      artifact:
        description: 'Name of the distribution artifact.'
        type: string
        required: false
        default: dist
jobs:
  build-source:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install Maturin
        run: python -m pip install maturin
      - name: Build source tarball
        run: python -m maturin sdist
      - name: Upload source tarball
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact }}
          path: target/wheels
  build-and-test-binary:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - {os: ubuntu-latest, arch: x64, native: true}
          - {os: ubuntu-latest, arch: aarch64, native: false}
          #- {os: ubuntu-latest, arch: armv7, native: false}
          - {os: macos-latest, arch: x64, native: true}
          - {os: macos-latest, arch: x64, native: true, maturin-args: '--universal2'}
          - {os: windows-latest, arch: x64, native: true}
          - {os: windows-latest, arch: x86, native: true}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python
        if: ${{ matrix.native }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.arch }}
      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.arch }}
          manylinux: auto
          args: --release ${{ matrix.maturin-args }}
      - name: Locate wheel
        id: locate-wheel
        shell: python
        run: |
          import os, pathlib, subprocess, sys
          wheel, = (pathlib.Path()/'target'/'wheels').glob('*.whl')
          print(f'found wheel: {wheel}')
          pathlib.Path(os.environ['GITHUB_OUTPUT']).open('a').write(f'wheel={wheel}\n')
      - name: Run Python unittests
        if: ${{ matrix.native }}
        run: |
          python -m pip install ${{ steps.locate-wheel.outputs.wheel }}
          python -m unittest -bv
      - name: Run Python unittests
        if: ${{ !matrix.native }}
        uses: uraimo/run-on-arch-action@v2.3.0
        with:
          arch: ${{ matrix.arch }}
          distro: ubuntu20.04
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip
            pip3 install -U pip
          run: |
            python3 -m pip install ${{ steps.locate-wheel.outputs.wheel }}
            python3 -m unittest -bv
      - name: Upload wheel
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact }}
          path: target/wheels
