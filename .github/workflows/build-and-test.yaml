name: Build and test a Python package using Maturin
on:
  workflow_call:
    inputs:
      targets:
        description: 'Python script that generates build targets.'
        type: string
        required: true
      artifact:
        description: 'Name of the distribution artifact.'
        type: string
        required: false
        default: dist
jobs:
  build-source:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install Maturin
        run: python -m pip install maturin
      - name: Build source tarball
        run: python -m maturin sdist
      - name: Upload source tarball
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact }}
          path: target/wheels
  generate-build-matrix:
    name: Generate build matrix
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.generate-build-matrix.outputs.build-matrix }}
    steps:
      - name: Generate build matrix
        id: generate-build-matrix
        shell: python
        run: |
            ${{ inputs.targets }}

            import json, os, pathlib

            build_matrix = []
            for input in targets:
                test_runner = False
                test_container = False
                maturin_args = []

                if input['python'].startswith('cp3'):
                    python_version = '3.' + input['python'][3:]
                else:
                    print(f'input: {json.dumps(input)}')
                    print(f'::error::unsupported value for `python`: {input["python"]}')
                    raise SystemExit(1)

                if input['os'] == 'linux':
                    runner_os = 'ubuntu-latest'
                    python_arch = 'x64'
                    if input['arch'] == 'x86_64':
                        maturin_target = 'x64'
                    else:
                        maturin_target = input['arch']
                        if input.get('test', True):
                            test_container = dict(
                                aarch64='quay.io/pypa/manylinux_2_28_aarch64',
                            ).get(input['arch'], None)
                            if test_container is None:
                                print(f'input: {json.dumps(input)}')
                                print(f'::error::no test container defined for arch {input["arch"]}')
                                raise SystemExit(1)
                elif input['os'] == 'macos':
                    runner_os = 'macos-latest'
                    python_arch = maturin_target = 'x64'
                    if input['arch'] == 'universal2':
                        maturin_args.append('--universal2')
                elif input['os'] == 'windows':
                    runner_os = 'windows-latest'
                    if input['arch'] == 'x86_64':
                        python_arch = maturin_target = 'x64'
                    elif input['arch'] == 'i686':
                        python_arch = maturin_target = 'x86'
                    else:
                        print(f'input: {json.dumps(input)}')
                        print(f'::error::unsupported value for `arch`: {input["arch"]}')
                        raise SystemExit(1)
                else:
                    print(f'input: {json.dumps(input)}')
                    print(f'::error::unsupported value for `os`: {input["os"]}')
                    raise SystemExit(1)

                if not input.get('test', True):
                    test_container = False
                else:
                    test_runner = not test_container

                output = {
                    'runner-os': runner_os,
                    'python-version': python_version,
                    'python-arch': python_arch,
                    'maturin-target': maturin_target,
                    'maturin-args': ' '.join(maturin_args),
                    'test-runner': test_runner,
                    'test-container': test_container,
                }
                del runner_os, python_version, python_arch, maturin_target, maturin_args, test_runner, test_container
                build_matrix.append(output)
                print(json.dumps(output))

            build_matrix = dict(include=build_matrix)
            pathlib.Path(os.environ['GITHUB_OUTPUT']).open('a').write(f'build-matrix={json.dumps(build_matrix)}\n')
  build-and-test-binary:
    runs-on: ${{ matrix.runner-os }}
    needs: generate-build-matrix
    strategy:
      matrix: ${{ fromJSON(needs.generate-build-matrix.outputs.build-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.python-arch }}
      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.maturin-target }}
          manylinux: auto
          args: --release ${{ matrix.maturin-args }}
      - name: Locate wheel
        id: locate-wheel
        shell: python
        run: |
          import os, pathlib, subprocess, sys
          wheel, = (pathlib.Path()/'target'/'wheels').glob('*.whl')
          print(f'found wheel: {wheel}')
          pathlib.Path(os.environ['GITHUB_OUTPUT']).open('a').write(f'wheel={wheel}\n')
      - name: Run Python unittests
        if: ${{ matrix.test-runner }}
        run: |
          python -m pip install ${{ steps.locate-wheel.outputs.wheel }}
          python -m unittest -bv
      - name: Set up QEMU
        if: ${{ matrix.test-container }}
        uses: docker/setup-qemu-action@v2
      - name: Run Python unittests
        if: ${{ matrix.test-container }}
        run: |
          docker run --rm -i --mount=type=bind,src="$PWD",dst=/repo ${{ matrix.test-container }} sh -se <<EOF
              cd /repo
              python${{ matrix.python-version }} -m pip install ${{ steps.locate-wheel.outputs.wheel }}
              python${{ matrix.python-version }} -m unittest -bv
          EOF
      - name: Upload wheel
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact }}
          path: target/wheels
